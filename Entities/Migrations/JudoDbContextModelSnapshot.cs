// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(JudoDbContext))]
    partial class JudoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CompetitionsDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CompetitionsId")
                        .HasColumnType("int");

                    b.Property<int>("DanKyuFrom")
                        .HasColumnType("int");

                    b.Property<int>("DanKyuTo")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<DateTime>("WeightInFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("WeightInTo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearsFrom")
                        .HasColumnType("int");

                    b.Property<int>("YearsTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionsId");

                    b.ToTable("AgeGroup");
                });

            modelBuilder.Entity("Entities.Models.Competitions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CardPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CompetitionsDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CompetitionsTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<decimal?>("EntryFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Place")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RegistrationStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Regulations")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionsTypeId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Entities.Models.CompetitionsJudge", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompetitionsId")
                        .HasColumnType("int");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CompetitionsId");

                    b.HasIndex("JudgeId");

                    b.ToTable("CompetitionsJudge");
                });

            modelBuilder.Entity("Entities.Models.CompetitionsResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JudokaId")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("WeightCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JudokaId");

                    b.HasIndex("WeightCategoryId");

                    b.ToTable("CompetitionsResults");
                });

            modelBuilder.Entity("Entities.Models.CompetitionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.ToTable("CompetitionsType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Points = 20,
                            Title = "National"
                        },
                        new
                        {
                            Id = 2,
                            Points = 30,
                            Title = "International"
                        });
                });

            modelBuilder.Entity("Entities.Models.Competitor", b =>
                {
                    b.Property<int>("WeightCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JudokaId")
                        .HasColumnType("int");

                    b.HasKey("WeightCategoryId", "JudokaId");

                    b.HasIndex("JudokaId");

                    b.ToTable("Competitor");
                });

            modelBuilder.Entity("Entities.Models.DanKyu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.ToTable("DanKyu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 1,
                            Text = "6 KYU"
                        },
                        new
                        {
                            Id = 2,
                            Grade = 2,
                            Text = "5 KYU"
                        },
                        new
                        {
                            Id = 3,
                            Grade = 3,
                            Text = "4 KYU"
                        },
                        new
                        {
                            Id = 4,
                            Grade = 4,
                            Text = "3 KYU"
                        },
                        new
                        {
                            Id = 5,
                            Grade = 5,
                            Text = "2 KYU"
                        },
                        new
                        {
                            Id = 6,
                            Grade = 5,
                            Text = "1 KYU"
                        },
                        new
                        {
                            Id = 7,
                            Grade = 7,
                            Text = "1 DAN"
                        },
                        new
                        {
                            Id = 8,
                            Grade = 8,
                            Text = "2 DAN"
                        },
                        new
                        {
                            Id = 9,
                            Grade = 9,
                            Text = "3 DAN"
                        },
                        new
                        {
                            Id = 10,
                            Grade = 10,
                            Text = "4 DAN"
                        },
                        new
                        {
                            Id = 11,
                            Grade = 11,
                            Text = "5 DAN"
                        },
                        new
                        {
                            Id = 12,
                            Grade = 12,
                            Text = "6 DAN"
                        },
                        new
                        {
                            Id = 13,
                            Grade = 13,
                            Text = "7 DAN"
                        },
                        new
                        {
                            Id = 14,
                            Grade = 14,
                            Text = "8 DAN"
                        },
                        new
                        {
                            Id = 15,
                            Grade = 15,
                            Text = "9 DAN"
                        },
                        new
                        {
                            Id = 16,
                            Grade = 16,
                            Text = "10 DAN"
                        });
                });

            modelBuilder.Entity("Entities.Models.Judoka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BirthYears")
                        .HasColumnType("int");

                    b.Property<int>("DanKyuId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DanKyuId");

                    b.HasIndex("UserId");

                    b.ToTable("Judoka");
                });

            modelBuilder.Entity("Entities.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("ExactName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("ShortName")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vilniaus g. 18",
                            City = "Vilnius",
                            Country = 1,
                            ExactName = "Administration Organization",
                            ShortName = "Admin org",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DanKyuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentUserId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("DanKyuId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentUserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2023, 4, 3, 19, 36, 56, 668, DateTimeKind.Local).AddTicks(266),
                            DanKyuId = 1,
                            DateCreated = new DateTime(2023, 4, 3, 19, 36, 56, 668, DateTimeKind.Local).AddTicks(319),
                            DateUpdated = new DateTime(2023, 4, 3, 19, 36, 56, 668, DateTimeKind.Local).AddTicks(334),
                            Email = "judosystem.info@gmail.com",
                            Firstname = "Evaldas",
                            Gender = 1,
                            Lastname = "Kušlevič",
                            OrganizationId = 1,
                            Password = "AQAAAAEAACcQAAAAEDhKHtNdONpJlh4tln9Ihq/8hc44sVrvdMzdm9Efd5sfqfljsq0mFnzs1aXD9Icy4Q==",
                            PhoneNumber = "+37060477292",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Type");

                    b.HasIndex("UserId", "Type")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.WeightCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.ToTable("WeightCategory");
                });

            modelBuilder.Entity("Entities.Models.AgeGroup", b =>
                {
                    b.HasOne("Entities.Models.Competitions", "Competitions")
                        .WithMany("AgeGroups")
                        .HasForeignKey("CompetitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Entities.Models.Competitions", b =>
                {
                    b.HasOne("Entities.Models.CompetitionsType", "ComppetitionsType")
                        .WithMany()
                        .HasForeignKey("CompetitionsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComppetitionsType");
                });

            modelBuilder.Entity("Entities.Models.CompetitionsJudge", b =>
                {
                    b.HasOne("Entities.Models.Competitions", "Competitions")
                        .WithMany("Judges")
                        .HasForeignKey("CompetitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Judge")
                        .WithMany("Competitions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitions");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("Entities.Models.CompetitionsResults", b =>
                {
                    b.HasOne("Entities.Models.Judoka", "Judoka")
                        .WithMany()
                        .HasForeignKey("JudokaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.WeightCategory", "WeightCategory")
                        .WithMany("Results")
                        .HasForeignKey("WeightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Judoka");

                    b.Navigation("WeightCategory");
                });

            modelBuilder.Entity("Entities.Models.Competitor", b =>
                {
                    b.HasOne("Entities.Models.Judoka", "Judoka")
                        .WithMany("WeightCategories")
                        .HasForeignKey("JudokaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.WeightCategory", "WeightCategory")
                        .WithMany("Competitors")
                        .HasForeignKey("WeightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Judoka");

                    b.Navigation("WeightCategory");
                });

            modelBuilder.Entity("Entities.Models.Judoka", b =>
                {
                    b.HasOne("Entities.Models.DanKyu", "DanKyu")
                        .WithMany()
                        .HasForeignKey("DanKyuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Judokas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DanKyu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.DanKyu", "DanKyu")
                        .WithMany()
                        .HasForeignKey("DanKyuId");

                    b.HasOne("Entities.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Entities.Models.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.Navigation("DanKyu");

                    b.Navigation("Organization");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("Entities.Models.UserRole", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.WeightCategory", b =>
                {
                    b.HasOne("Entities.Models.AgeGroup", "AgeGroup")
                        .WithMany("WeightCategories")
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");
                });

            modelBuilder.Entity("Entities.Models.AgeGroup", b =>
                {
                    b.Navigation("WeightCategories");
                });

            modelBuilder.Entity("Entities.Models.Competitions", b =>
                {
                    b.Navigation("AgeGroups");

                    b.Navigation("Judges");
                });

            modelBuilder.Entity("Entities.Models.Judoka", b =>
                {
                    b.Navigation("WeightCategories");
                });

            modelBuilder.Entity("Entities.Models.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Judokas");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Models.WeightCategory", b =>
                {
                    b.Navigation("Competitors");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
